{"version":3,"file":"can-create-panels_test.js","sourceRoot":"","sources":["../../../../../../test/e2e/extensions/can-create-panels_test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {assert} from 'chai';\n\nimport {expectError} from '../../conductor/events.js';\nimport {\n  getBrowserAndPages,\n  waitFor,\n  waitForAria,\n  waitForAriaNone,\n  waitForFunction,\n} from '../../shared/helper.js';\nimport {loadExtension} from '../helpers/extension-helpers.js';\n\ndescribe('The Extension API', async () => {\n  it('can create panels with callbacks', async () => {\n    const extension = await loadExtension('TestExtension');\n\n    const callbackArgs = await extension.evaluate(\n        () => new Promise<string>(\n            r => window.chrome.devtools.panels.create(\n                'extension-tab-title', /* iconPath=*/ '', /* resourcePath=*/ '',\n                (...args) => r(JSON.stringify(args)))));\n\n    assert.deepEqual(callbackArgs, '[{\"onShown\":{},\"onHidden\":{},\"onSearch\":{}}]');\n  });\n\n  it('rejects absolute resource URLs', async () => {\n    const extension = await loadExtension('TestExtension');\n\n    const error = expectError(\n        'Extension server error: Invalid argument page: Resources paths cannot point to non-extension resources');\n    // absolute URLs should report an error and not create a panel view\n    await extension.evaluate(async () => {\n      await new Promise(\n          r => window.chrome.devtools.panels.create(\n              'extension-tab-title', /* iconPath=*/ '', /* resourcePath=*/ 'http://example.com', r));\n    });\n    await waitForFunction(async () => error.caught);\n    await waitForAriaNone('extension-tab-title');\n  });\n\n  it('handles absolute resource paths correctly', async () => {\n    const extension = await loadExtension('TestExtension');\n    const {frontend} = getBrowserAndPages();\n    // We don't have a real extension host, so the extension origin will match the frontend\n    const origin = await frontend.evaluate(() => document.location.origin);\n\n    await extension.evaluate(async () => {\n      await new Promise(\n          r => window.chrome.devtools.panels.create(\n              'extension-tab-title', /* iconPath=*/ '', /* resourcePath=*/ '/blank.html', r));\n    });\n    const header = await waitForAria('extension-tab-title');\n    await header.click();\n    const panel = await waitForAria('extension-tab-title panel');\n    const page = await waitFor('iframe', panel);\n    const target = await page.evaluate(e => (e as HTMLIFrameElement).src);\n    assert.strictEqual(target, `${origin}/blank.html`);\n  });\n\n  it('handles relative resource paths correctly', async () => {\n    const extension = await loadExtension('TestExtension');\n    const {frontend} = getBrowserAndPages();\n    // We don't have a real extension host, so the extension origin will match the frontend\n    const origin = await frontend.evaluate(() => document.location.origin);\n    await extension.evaluate(async () => {\n      await new Promise(\n          r => window.chrome.devtools.panels.create(\n              'extension-tab-title', /* iconPath=*/ '', /* resourcePath=*/ '/blank.html', r));\n    });\n    const header = await waitForAria('extension-tab-title');\n    await header.click();\n    const panel = await waitForAria('extension-tab-title panel');\n    const page = await waitFor('iframe', panel);\n    const target = await page.evaluate(e => (e as HTMLIFrameElement).src);\n    assert.strictEqual(target, `${origin}/blank.html`);\n  });\n});\n"]}